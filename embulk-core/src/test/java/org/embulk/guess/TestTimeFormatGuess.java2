package org.embulk.guess;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import org.junit.Test;

public class TestTimeFormatGuess {
    @Test
    public void testFormatDelims() {
        // date-delim "-"  date-time-delim " "  time-delim ":"  frac delim "."
        assertGuess("%Y-%m-%d %H:%M:%S.%N",    "2014-01-01 01:01:01.000000001");
        assertGuess("%Y-%m-%d %H:%M:%S.%N",    "2014-01-01 01:01:01.000001");
        assertGuess("%Y-%m-%d %H:%M:%S.%L",    "2014-01-01 01:01:01.001");
        assertGuess("%Y-%m-%d %H:%M:%S",       "2014-01-01 01:01:01");
        assertGuess("%Y-%m-%d %H:%M",          "2014-01-01 01:01");
        assertGuess("%Y-%m-%d",                "2014-01-01");

        // date-delim "/"  date-time-delim " "  time-delim "-"  frac delim ","
        assertGuess("%Y/%m/%d %H-%M-%S,%N",    "2014/01/01 01-01-01,000000001");
        assertGuess("%Y/%m/%d %H-%M-%S,%N",    "2014/01/01 01-01-01,000001");
        assertGuess("%Y/%m/%d %H-%M-%S,%L",    "2014/01/01 01-01-01,001");
        assertGuess("%Y/%m/%d %H-%M-%S",       "2014/01/01 01-01-01");
        assertGuess("%Y/%m/%d %H-%M",          "2014/01/01 01-01");
        assertGuess("%Y/%m/%d",                "2014/01/01");

        // date-delim "."  date-time-delim "."  time-delim ":"  frac delim "."
        assertGuess("%Y.%m.%d.%H:%M:%S.%N",    "2014.01.01.01:01:01.000000001");
        assertGuess("%Y.%m.%d.%H:%M:%S.%N",    "2014.01.01.01:01:01.000001");
        assertGuess("%Y.%m.%d.%H:%M:%S.%L",    "2014.01.01.01:01:01.001");
        assertGuess("%Y.%m.%d.%H:%M:%S",       "2014.01.01.01:01:01");
        assertGuess("%Y.%m.%d.%H:%M",          "2014.01.01.01:01");
        assertGuess("%Y.%m.%d",                "2014.01.01");

        // date-delim "."  date-time-delim ". "  time-delim ":"  frac delim ","
        assertGuess("%Y.%m.%d. %H:%M:%S,%N",    "2014.01.01. 01:01:01,000000001");
        assertGuess("%Y.%m.%d. %H:%M:%S,%N",    "2014.01.01. 01:01:01,000001");
        assertGuess("%Y.%m.%d. %H:%M:%S,%L",    "2014.01.01. 01:01:01,001");
        assertGuess("%Y.%m.%d. %H:%M:%S",       "2014.01.01. 01:01:01");
        assertGuess("%Y.%m.%d. %H:%M",          "2014.01.01. 01:01");
        assertGuess("%Y.%m.%d",                 "2014.01.01");
    }

    @Test
    public void testFormatYmdOrders() {
        assertGuess("%Y-%m-%d", "2014-01-01");
        assertGuess("%Y/%m/%d", "2014/01/01");
        assertGuess("%Y.%m.%d", "2014.01.01");
        assertGuess("%m/%d/%Y", "01/01/2014");
        assertGuess("%m.%d.%Y", "01.01.2014");
        assertGuess("%d/%m/%Y", "13/01/2014");
        assertGuess("%d/%m/%Y", "21/01/2014");

        assertGuess("%d/%m/%Y %H-%M-%S,%N",    "21/01/2014 01-01-01,000000001");
        assertGuess("%d/%m/%Y %H-%M-%S,%N",    "21/01/2014 01-01-01,000001");
        assertGuess("%d/%m/%Y %H-%M-%S,%L",    "21/01/2014 01-01-01,001");
        assertGuess("%d/%m/%Y %H-%M-%S",       "21/01/2014 01-01-01");
        assertGuess("%d/%m/%Y %H-%M",          "21/01/2014 01-01");
        assertGuess("%d/%m/%Y",                "21/01/2014");
    }

    @Test
    public void testFormatBorders() {
        assertGuess("%Y-%m-%d %H:%M:%S.%N",    "2014-12-31 23:59:59.999999999");
    }

    @Test
    public void testFormatIso8601() {
        assertGuess("%Y-%m-%d", "1981-04-05");
        assertGuess("%Y-%m-%dT%H", "2007-04-06T13");
        assertGuess("%Y-%m-%dT%H:%M", "2007-04-06T00:00");
        assertGuess("%Y-%m-%dT%H:%M", "2007-04-05T24:00");
        assertGuess("%Y-%m-%dT%H:%M:%S", "2007-04-06T13:47:30");
        assertGuess("%Y-%m-%dT%H:%M:%S%z", "2007-04-06T13:47:30Z");
        assertGuess("%Y-%m-%dT%H:%M:%S%z", "2007-04-06T13:47:30+00");
        assertGuess("%Y-%m-%dT%H:%M:%S%:z", "2007-04-06T13:47:30+00:00");
        assertGuess("%Y-%m-%dT%H:%M:%S%z", "2007-04-06T13:47:30+0000");
        assertGuess("%Y-%m-%dT%H:%M:%S%z", "2007-04-06T13:47:30-01");
        assertGuess("%Y-%m-%dT%H:%M:%S%:z", "2007-04-06T13:47:30-01:30");
        assertGuess("%Y-%m-%dT%H:%M:%S%z", "2007-04-06T13:47:30-0130");
    }

    @Test
    public void testFormatRfc822Rfc2822() {
        // This test is disabled because of https://github.com/jruby/jruby/issues/3702
        // assertGuess("%a, %d %b %Y %H:%M:%S %Z", "Fri, 20 Feb 2015 14:02:34 PST");
        assertGuess("%a, %d %b %Y %H:%M:%S %z", "Fri, 20 Feb 2015 22:02:34 UT");
        assertGuess("%a, %d %b %Y %H:%M:%S %z", "Fri, 20 Feb 2015 22:02:34 GMT");
        assertGuess(    "%d %b %Y %H:%M:%S %z",      "20 Feb 2015 22:02:34 GMT");
        assertGuess(    "%d %b %Y %H:%M %z",         "20 Feb 2015 22:02 GMT");
        assertGuess("%a, %d %b %Y %H:%M %z",    "Fri, 20 Feb 2015 22:02 GMT");
        assertGuess(    "%d %b %Y",                  "20 Feb 2015");
        assertGuess("%a, %d %b %Y",             "Fri, 20 Feb 2015");
        assertGuess("%a, %d %b %Y %H:%M %z",    "Fri, 20 Feb 2015 22:02 +0000");
        assertGuess("%a, %d %b %Y %H:%M %:z",   "Fri, 20 Feb 2015 22:02 +00:00");
        assertGuess("%a, %d %b %Y %H:%M %z",    "Fri, 20 Feb 2015 22:02 +00");
    }

    @Test
    public void testFormatApacheClf() {
        assertGuess('%d/%b/%Y:%H:%M:%S %z', "07/Mar/2004:16:05:50 -0800");
    }

    @Test
    public void testFormatAnsiAsctime() {
        assertGuess('%a %b %e %H:%M:%S %Y', "Fri May 11 21:44:53 2001");
    }

    @Test
    public void testFormatMergeFrequency() {
        assertGuessPartial(2, "%Y-%m-%d %H:%M:%S", "2014-01-01", "2014-01-01 00:00:00", "2014-01-01 00:00:00");
        assertGuessPartial(3, "%Y-%m-%d %H:%M:%S %z", "2014-01-01 00:00:00 +0000", "2014-01-01 00:00:00 +0000", "2014-01-01 00:00:00 +00:00");
    }

    @Test
    public void testFormatMergeDmy() {
        // DMY has higher priority than MDY
        assertGuess("%m/%d/%Y", "01/01/2014");
        assertGuess("%d/%m/%Y", "01/01/2014", "01/01/2014", "13/01/2014");
        assertGuess("%d.%m.%Y", "01.01.2014", "01.01.2014", "13.01.2014");
        // but frequency is more important if delimiter is different
        assertGuessPartial(2, "%m/%d/%Y", "01/01/2014", "01/01/2014", "13.01.2014");
    }

    private static void assertGuess(final String format, final String... texts) {
        assertEquals(format, guess(texts));
        for (final String text : texts) {
            /*
            final time = Time.strptime(text, format);
            assertEquals(time.to_i, Time.strptime(time.strftime(format), format).to_i);
            */
        }
    }

    private static void assertGuessPartial(final int count, final String format, final String... texts) {
        assertEquals(format, guess(texts));

        /*
    times = Array(texts).map do |text|
      Time.strptime(text, format) rescue nil
    end.compact
    assert_equal count, times.size
    times.each do |time|
      assert_equal time.to_i, Time.strptime(time.strftime(format), format).to_i
    end
        */
    }

    private static String guess(final String[] texts) {
        return TimeFormatGuess.guess(Arrays.toList(texts));
    }
}
